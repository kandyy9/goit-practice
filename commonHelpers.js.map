{"version":3,"file":"commonHelpers.js","sources":["../src/js/ls-helpers.js","../src/main.js"],"sourcesContent":["export function getFromLocalStorage(key){\n  const allValue = JSON.parse(localStorage.getItem(key));\n  return allValue;\n}\n\nexport function setToLocalStorage(value, key) {\n  localStorage.setItem(key, JSON.stringify(value));\n}","import { nanoid } from 'nanoid';\nimport { getFromLocalStorage, setToLocalStorage } from './js/ls-helpers'\n\nconst taskForm = document.querySelector('#task-form');\nconst taskList = document.querySelector('#task-list');\nconst taskKey = 'task_key';\n\n//TODO-1\n// Напишіть логіку обробнику подій по сабміту\n// При сабміті треба у змінну записувати значення поля інпута\n// Повинна бути перевірка на порожнє поле.\n\ntaskForm.addEventListener('submit', evt => {\n  evt.preventDefault();\n  const value = evt.target.elements.taskName.value.trim();\n  if (!value) return;\n  const id = nanoid();\n  addItem(value, id);\n  addLocalStorage(value, id);\n  evt.target.reset();\n});\n\nfunction addItem(item, id) {\n  taskList.insertAdjacentHTML(\n    'beforeend',\n    `<li id=\"${id}\">${item} <button class=\"close-btn\" type=\"button\">X</button></li>`\n  );\n}\n\n//TODO-3\n// Написати функцію, яка при сабміті буде зберігати данні в сховище по ключу task_key, в сховище повинні додаватись таски,\n// а не перезаписуватись існуюча\n\nfunction addLocalStorage(value, id) {\n  const allValue = getFromLocalStorage(taskKey)?? [];\n  allValue.push({ id, text: value });\n  setToLocalStorage(allValue, taskKey);\n}\n\n//TODO-4\n//Відформатуйте код таким чином, щоб данні в сховищі зберігались у вигляді об'єкта { id: value, text: value}, розмітка додавалась з айдішніком на елемент списку li, айдішнік генерувати з допомогою бібліотеки nanoid, її треба встановити\n\n\n//TODO-5\n// Написати функцію, яка буде при завантаженні сторінки відмальовувати розмітку беручи данні з ЛС\n\n(() => {\n    const items = getFromLocalStorage(taskKey);\n    if (!items) return;\n  const markup = items.map((item) => {\n    return `<li id=\"${item.id}\">${item.text} <button class=\"close-btn\" type=\"button\">X</button></li>`;\n  }).join('')\n  taskList.insertAdjacentHTML('beforeend', markup);\n})();\n\n\ntaskList.addEventListener(\"click\", (evt) => {\n    if (!(evt.target.classList.contains(\"close-btn\"))) return;\n    const id = evt.target.parentNode.id;\n    const items = getFromLocalStorage(taskKey);\n    const filteredItems = items.filter((item) => item.id !== id);\n    setToLocalStorage(filteredItems, taskKey);\n    evt.target.parentNode.remove();\n})"],"names":["getFromLocalStorage","key","setToLocalStorage","value","taskForm","taskList","taskKey","evt","id","nanoid","addItem","addLocalStorage","item","allValue","items","markup","filteredItems"],"mappings":"svBAAO,SAASA,EAAoBC,EAAI,CAEtC,OADiB,KAAK,MAAM,aAAa,QAAQA,CAAG,CAAC,CAEvD,CAEO,SAASC,EAAkBC,EAAOF,EAAK,CAC5C,aAAa,QAAQA,EAAK,KAAK,UAAUE,CAAK,CAAC,CACjD,CCJA,MAAMC,EAAW,SAAS,cAAc,YAAY,EAC9CC,EAAW,SAAS,cAAc,YAAY,EAC9CC,EAAU,WAOhBF,EAAS,iBAAiB,SAAUG,GAAO,CACzCA,EAAI,eAAc,EAClB,MAAMJ,EAAQI,EAAI,OAAO,SAAS,SAAS,MAAM,OACjD,GAAI,CAACJ,EAAO,OACZ,MAAMK,EAAKC,IACXC,EAAQP,EAAOK,CAAE,EACjBG,EAAgBR,EAAOK,CAAE,EACzBD,EAAI,OAAO,OACb,CAAC,EAED,SAASG,EAAQE,EAAMJ,EAAI,CACzBH,EAAS,mBACP,YACA,WAAWG,CAAE,KAAKI,CAAI,0DAC1B,CACA,CAMA,SAASD,EAAgBR,EAAOK,EAAI,CAClC,MAAMK,EAAWb,EAAoBM,CAAO,GAAI,CAAA,EAChDO,EAAS,KAAK,CAAE,GAAAL,EAAI,KAAML,CAAO,CAAA,EACjCD,EAAkBW,EAAUP,CAAO,CACrC,EASC,IAAM,CACH,MAAMQ,EAAQd,EAAoBM,CAAO,EACzC,GAAI,CAACQ,EAAO,OACd,MAAMC,EAASD,EAAM,IAAKF,GACjB,WAAWA,EAAK,EAAE,KAAKA,EAAK,IAAI,0DACxC,EAAE,KAAK,EAAE,EACVP,EAAS,mBAAmB,YAAaU,CAAM,CACjD,KAGAV,EAAS,iBAAiB,QAAUE,GAAQ,CACxC,GAAI,CAAEA,EAAI,OAAO,UAAU,SAAS,WAAW,EAAI,OACnD,MAAMC,EAAKD,EAAI,OAAO,WAAW,GAE3BS,EADQhB,EAAoBM,CAAO,EACb,OAAQM,GAASA,EAAK,KAAOJ,CAAE,EAC3DN,EAAkBc,EAAeV,CAAO,EACxCC,EAAI,OAAO,WAAW,QAC1B,CAAC"}